from __future__ import annotations
from typing import List, Optional

class ВзлетноПосадочнаяПолоса:
    def __init__(self, id: int):
        self.id = id
        self.занята = False

    def __repr__(self) -> str:
        return f"ВПП №{self.id}"

class Терминал:
    def __init__(self, id: int):
        self.id = id
        self.занят = False

    def __repr__(self) -> str:
        return f"Терминал №{self.id}"

class АвиадиспетчерскаяВышка:
    def __init__(self):
        self.впп: List[ВзлетноПосадочнаяПолоса] = []
        self.терминалы: List[Терминал] = []

    def добавить_впп(self, впп: ВзлетноПосадочнаяПолоса):
        self.впп.append(впп)

    def добавить_терминал(self, терминал: Терминал):
        self.терминалы.append(терминал)

    def разрешить_взлет(self, самолет: Самолет) -> bool:
        доступная_впп = next((п for п in self.впп if not п.занята), None)
        if доступная_впп:
            доступная_впп.занята = True
            print(f"Вышка: Разрешаю взлет самолету {самолет.имя} с {доступная_впп}.")
            self.впп_в_использовании = доступная_впп
            return True
        else:
            print(f"Вышка: Отказываю в взлете самолету {самолет.имя}. Все ВПП заняты.")
            return False

    def завершить_взлет(self, самолет: Самолет):
        print(f"Вышка: Самолет {самолет.имя} завершил взлет.")
        if hasattr(self, 'впп_в_использовании') and self.впп_в_использовании:
            self.впп_в_использовании.занята = False
            self.впп_в_использовании = None

    def разрешить_посадку(self, самолет: Самолет) -> bool:
        доступная_впп = next((п for п in self.впп if not п.занята), None)
        if доступная_впп:
            доступная_впп.занята = True
            print(f"Вышка: Разрешаю посадку самолету {самолет.имя} на {доступная_впп}.")
            self.впп_в_использовании = доступная_впп
            return True
        else:
            print(f"Вышка: Отказываю в посадке самолету {самолет.имя}. Все ВПП заняты.")
            return False

    def завершить_посадку(self, самолет: Самолет):
        print(f"Вышка: Самолет {самолет.имя} завершил посадку.")
        if hasattr(self, 'впп_в_использовании') and self.впп_в_использовании:
            self.впп_в_использовании.занята = False
            self.впп_в_использовании = None

    def разрешить_парковку_у_терминала(self, самолет: Самолет) -> bool:
        доступный_терминал = next((т for т in self.терминалы if not т.занят), None)
        if доступный_терминал:
            доступный_терминал.занят = True
            print(f"Вышка: Разрешаю парковку самолету {самолет.имя} у {доступный_терминал}.")
            return True
        else:
            print(f"Вышка: Отказываю в парковке самолету {самолет.имя}. Все терминалы заняты.")
            return False

    def завершить_парковку(self, самолет: Самолет, терминал_id: int):
        терминал = next((т for т in self.терминалы if т.id == терминал_id), None)
        if терминал:
            терминал.занят = False
            print(f"Вышка: Самолет {самолет.имя} освободил {терминал}.")

class Самолет:
    def __init__(self, имя: str, вышка: АвиадиспетчерскаяВышка):
        self.имя = имя
        self.вышка = вышка
        self.статус = "на_земле"
        self.терминал = None

    def __repr__(self) -> str:
        return f"Самолет {self.имя}"

    def запросить_взлет(self):
        print(f"{self.имя}: Запрашиваю разрешение на взлет.")
        if self.вышка.разрешить_взлет(self):
            self.статус = "взлетает"
            print(f"{self.имя}: Взлетаю...")
            self.вышка.завершить_взлет(self)
            self.статус = "в_полете"
            print(f"{self.имя}: В воздухе.")
        else:
            print(f"{self.имя}: Ожидаю разрешения на взлет.")

    def запросить_посадку(self):
        print(f"{self.имя}: Запрашиваю разрешение на посадку.")
        if self.вышка.разрешить_посадку(self):
            self.статус = "заходит_на_посадку"
            print(f"{self.имя}: Захожу на посадку.")
            self.вышка.завершить_посадку(self)
            self.статус = "на_земле"
            print(f"{self.имя}: Приземлился.")
            self.запросить_парковку()
        else:
            print(f"{self.имя}: Ожидаю разрешения на посадку.")

    def запросить_парковку(self):
        print(f"{self.имя}: Запрашиваю парковку у терминала.")
        if self.вышка.разрешить_парковку_у_терминала(self):
            self.статус = "паркуется"
            print(f"{self.имя}: Паркуюсь у терминала.")
            self.статус = "в_терминале"
            print(f"{self.имя}: Припаркован.")

if __name__ == "__main__":
    вышка = АвиадиспетчерскаяВышка()

    for i in range(1, 4):
        вышка.добавить_впп(ВзлетноПосадочнаяПолоса(i))
    for i in range(1, 6):
        вышка.добавить_терминал(Терминал(i))

    самолет1 = Самолет("Boeing 747", вышка)
    самолет2 = Самолет("Airbus A380", вышка)
    самолет3 = Самолет("Cessna 172", вышка)
    самолет4 = Самолет("Boeing 777", вышка)
    самолет5 = Самолет("Boeing 787", вышка)

    print("\n--- Сценарий взлета ---\n")
    самолет1.запросить_взлет()
    самолет2.запросить_взлет()
    самолет3.запросить_взлет()
    самолет4.запросить_взлет()
    print("\n--- Сценарий посадки ---\n")
    самолет5.запросить_посадку()
    самолет4.запросить_посадку()
    самолет3.запросить_посадку()
    самолет2.запросить_посадку()
    самолет1.запросить_посадку()
